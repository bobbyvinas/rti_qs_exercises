
/* ShapeType_subscriber.cs

A subscription example

This file is derived from code automatically generated by the rtiddsgen 
command:

rtiddsgen -language C# -example <arch> ShapeType.idl

Example subscription of type ShapeType automatically generated by 
'rtiddsgen'. To test them, follow these steps:

(1) Compile this file and the example publication.

(2) Start the subscription with the command
objs\<arch>${constructMap.nativeFQNameInModule}_subscriber <domain_id> <sample_count>

(3) Start the publication with the command
objs\<arch>${constructMap.nativeFQNameInModule}_publisher <domain_id> <sample_count>

(4) [Optional] Specify the list of discovery initial peers and 
multicast receive addresses via an environment variable or a file 
(in the current working directory) called NDDS_DISCOVERY_PEERS. 

You can run any number of publishers and subscribers programs, and can 
add and remove them dynamically from the domain.

Example:

To run the example application on domain <domain_id>:

bin\<Debug|Release>\ShapeType_publisher <domain_id> <sample_count>  
bin\<Debug|Release>\ShapeType_subscriber <domain_id> <sample_count>
*/

using System;
using System.Collections.Generic;
using System.Text;
using DDS;

public class ShapeTypeSubscriber {
    public static void Main(string[] args) {

        // --- Get domain ID --- //
        int domain_id = 0;
        if (args.Length >= 1) {
            domain_id = Int32.Parse(args[0]);
        }

        // --- Get max loop count; 0 means infinite loop  --- //
        int sample_count = 0;
        if (args.Length >= 2) {
            sample_count = Int32.Parse(args[1]);
        }

        /* Uncomment this to turn on additional logging
        NDDS.ConfigLogger.get_instance().set_verbosity_by_category(
            NDDS.LogCategory.NDDS_CONFIG_LOG_CATEGORY_API, 
            NDDS.LogVerbosity.NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL);
        */

        // --- Run --- //
        try {
            ShapeTypeSubscriber.subscribe(
                domain_id, sample_count);
        }
        catch(DDS.Exception) {
            Console.WriteLine("error in subscriber");
        }
    }

    static void subscribe(int domain_id, int sample_count) {

        // --- Create participant --- //

        /* To customize the participant QoS, use 
        the configuration file USER_QOS_PROFILES.xml */
        DDS.DomainParticipant participant =
        DDS.DomainParticipantFactory.get_instance().create_participant_with_profile(
            domain_id,
            SHAPETYPE_LIBRARY.VALUE, SHAPETYPE_PROFILE.VALUE, 
            null /* listener */,
            DDS.StatusMask.STATUS_MASK_NONE);
        if (participant == null) {
            shutdown(participant);
            throw new ApplicationException("create_participant error");
        }

        // --- Create subscriber --- //

        /* To customize the subscriber QoS, use 
        the configuration file USER_QOS_PROFILES.xml */
        DDS.Subscriber subscriber = participant.create_subscriber_with_profile(
            SHAPETYPE_LIBRARY.VALUE, SHAPETYPE_PROFILE.VALUE,
            null /* listener */,
            DDS.StatusMask.STATUS_MASK_NONE);
        if (subscriber == null) {
            shutdown(participant);
            throw new ApplicationException("create_subscriber error");
        }

        // --- Create topic --- //

        /* Register the type before creating the topic */
        System.String type_name = ShapeTypeTypeSupport.get_type_name();
        try {
            ShapeTypeTypeSupport.register_type(
                participant, type_name);
        }
        catch(DDS.Exception e) {
            Console.WriteLine("register_type error {0}", e);
            shutdown(participant);
            throw e;
        }

        /* To customize the topic QoS, use 
        the configuration file USER_QOS_PROFILES.xml */
        DDS.Topic topic = participant.create_topic(
            "Square",
            type_name,
            DDS.DomainParticipant.TOPIC_QOS_DEFAULT,
            null /* listener */,
            DDS.StatusMask.STATUS_MASK_NONE);
        if (topic == null) {
            shutdown(participant);
            throw new ApplicationException("create_topic error");
        }

        DDS.StringSeq parameters = new DDS.StringSeq(1);
        DDS.StringWrapper[] param_list =
                new DDS.StringWrapper[1] { "GREEN" };
        parameters.from_array(param_list);
        DDS.ContentFilteredTopic cft = null;

        /* create_contentfilteredtopic_with_filter */
/*
        cft = participant.create_contentfilteredtopic_with_filter(
            "ContentFilteredTopic", topic, "color MATCH %0", parameters,
            DDS.DomainParticipant.STRINGMATCHFILTER_NAME);
        if (cft == null)
        {
            shutdown(participant);
            throw new ApplicationException(
                "create_contentfilteredtopic_with_filter error");
        }
*/
        // --- Create reader --- //

        /* To customize the data reader QoS, use 
        the configuration file USER_QOS_PROFILES.xml */
        DDS.DataReader reader = subscriber.create_datareader_with_profile(
            topic,
            SHAPETYPE_LIBRARY.VALUE, SHAPETYPE_PROFILE.VALUE,
            null,
            DDS.StatusMask.STATUS_MASK_ALL);
        if (reader == null) {
            shutdown(participant);
            throw new ApplicationException("create_datareader error");
        }

        // Get narrowed datareader
        ShapeTypeDataReader ShapeType_reader = (ShapeTypeDataReader)reader;

        DDS.StatusCondition status_condition = reader.get_statuscondition();

        try
        {
            status_condition.set_enabled_statuses(
                (DDS.StatusMask)DDS.StatusKind.DATA_AVAILABLE_STATUS);
        }
        catch (DDS.Exception e)
        {
            shutdown(participant);
            throw new ApplicationException("set_enabled_statuses error {0}",
                e);
        }

        DDS.WaitSet waitset = new DDS.WaitSet();

        try
        {
            waitset.attach_condition(status_condition);
        }
        catch (DDS.Exception e)
        {
            shutdown(participant);
            throw new ApplicationException("set_enabled_statuses error {0}",
                e);

        }

        // --- Wait for data --- //
        DDS.Duration_t timeout;
        timeout.nanosec = (uint)500000000;
        timeout.sec = 1;

        /* Main loop */
        for (int count=0; (sample_count == 0) || (count < sample_count); ++count) {
            DDS.ConditionSeq active_conditions = new DDS.ConditionSeq();

            // The triggered condition(s) will be placed in active_conditions
            try
            {
                waitset.wait(active_conditions, timeout);
                Console.WriteLine("got {0} active conditions", active_conditions.length);
            }
            catch (DDS.Retcode_Timeout)
            {
                Console.WriteLine("Wait timed out!! No conditions were triggered.");
                continue;
            }
            catch (DDS.Exception e)
            {
                Console.WriteLine("wait error {0}", e);
                break;
            }

            for (int i = 0; i < active_conditions.length; ++i)
            {
                if (active_conditions.get_at(i) == status_condition)
                {
                    DDS.StatusMask triggeredmask =
                        ShapeType_reader.get_status_changes();

                    if ((triggeredmask & (DDS.StatusMask)DDS.StatusKind.DATA_AVAILABLE_STATUS) != 0)
                    {
                        ShapeTypeSeq data_seq = new ShapeTypeSeq();
                        DDS.SampleInfoSeq info_seq = new DDS.SampleInfoSeq();

                        try
                        {
                            ShapeType_reader.take(
                                data_seq,
                                info_seq,
                                DDS.ResourceLimitsQosPolicy.LENGTH_UNLIMITED,
                                DDS.SampleStateKind.ANY_SAMPLE_STATE,
                                DDS.ViewStateKind.ANY_VIEW_STATE,
                                DDS.InstanceStateKind.ANY_INSTANCE_STATE);
                        }
                        catch (DDS.Retcode_NoData)
                        {
                            return;
                        }
                        catch (DDS.Exception e)
                        {
                            Console.WriteLine("take error {0}", e);
                            return;
                        }

                        System.Int32 data_length = data_seq.length;

                        ShapeType newShape = ShapeTypeTypeSupport.create_data();
                        for (int j = 0; j < data_length; ++j)
                        {
                            if (info_seq.get_at(j).valid_data)
                            {
                                ShapeTypeTypeSupport.print_data(data_seq.get_at(j));
                            }
                            else
                            {

                                InstanceHandle_t sampleInfoInstanceHandle = info_seq.get_at(j).instance_handle;

                                ShapeType_reader.get_key_value(newShape, ref sampleInfoInstanceHandle);
    
                                if (info_seq.get_at(j).instance_state == InstanceStateKind.NOT_ALIVE_DISPOSED_INSTANCE_STATE)
                                {
                                    Console.WriteLine("Recieved a disposed for instance: {0}", newShape.color);
                                }
                                else if (info_seq.get_at(j).instance_state == InstanceStateKind.NOT_ALIVE_NO_WRITERS_INSTANCE_STATE)
                                {
                                    Console.WriteLine("Recieved an unregister for instance: {0}", newShape.color);
                                }
                            }
                        }

                        try
                        {
                            ShapeType_reader.return_loan(data_seq, info_seq);
                        }
                        catch (DDS.Exception e)
                        {
                            Console.WriteLine("return loan error {0}", e);
                        }
                    }
                }
            }
        }

        // --- Shutdown --- //

        /* Delete all entities */
        shutdown(participant);
    }

    static void shutdown(
        DDS.DomainParticipant participant) {

        /* Delete all entities */

        if (participant != null) {
            participant.delete_contained_entities();
            DDS.DomainParticipantFactory.get_instance().delete_participant(
                ref participant);
        }

        /* RTI Connext provides finalize_instance() method on
        domain participant factory for users who want to release memory
        used by the participant factory. Uncomment the following block of
        code for clean destruction of the singleton. */
        /*
        try {
            DDS.DomainParticipantFactory.finalize_instance();
        }
        catch(DDS.Exception e) {
            Console.WriteLine("finalize_instance error {0}", e);
            throw e;
        }
        */
    }
}

